"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const ts = require("typescript");
function getTsSourceText(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not read file (${path}).`);
    }
    return buffer.toString();
}
exports.getTsSourceText = getTsSourceText;
function generateExport(sourceFile, elements, module) {
    const printer = ts.createPrinter();
    const exports = elements.map(element => ts.createExportSpecifier(undefined, element));
    const namedExports = ts.createNamedExports(exports);
    const moduleSpecifier = ts.createStringLiteral(module);
    const exportDeclaration = ts.createExportDeclaration(undefined, undefined, namedExports, moduleSpecifier);
    return printer.printNode(ts.EmitHint.Unspecified, exportDeclaration, sourceFile);
}
exports.generateExport = generateExport;
function findAppServerModuleExport(host, mainPath) {
    const mainBuffer = host.read(mainPath);
    if (!mainBuffer) {
        throw new schematics_1.SchematicsException(`Main file (${mainPath}) not found`);
    }
    const mainText = mainBuffer.toString('utf-8');
    const source = ts.createSourceFile(mainPath, mainText, ts.ScriptTarget.Latest, true);
    const allNodes = ast_utils_1.getSourceNodes(source);
    let exportDeclaration = null;
    for (const node of allNodes) {
        let exportDeclarationNode = node;
        while (exportDeclarationNode &&
            exportDeclarationNode.parent &&
            exportDeclarationNode.parent.kind !== ts.SyntaxKind.ExportDeclaration) {
            exportDeclarationNode = exportDeclarationNode.parent;
        }
        if (exportDeclarationNode !== null &&
            exportDeclarationNode.parent !== undefined &&
            exportDeclarationNode.parent.kind === ts.SyntaxKind.ExportDeclaration) {
            exportDeclaration = exportDeclarationNode.parent;
            break;
        }
    }
    return exportDeclaration;
}
exports.findAppServerModuleExport = findAppServerModuleExport;
function findAppServerModulePath(host, mainPath) {
    const exportDeclaration = findAppServerModuleExport(host, mainPath);
    if (!exportDeclaration) {
        throw new schematics_1.SchematicsException('Could not find app server module export');
    }
    const moduleSpecifier = exportDeclaration.moduleSpecifier.getText();
    return moduleSpecifier.substring(1, moduleSpecifier.length - 1);
}
exports.findAppServerModulePath = findAppServerModulePath;
