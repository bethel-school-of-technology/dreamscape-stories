"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const config_1 = require("@schematics/angular/utility/config");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const rules_1 = require("./express-engine/rules");
const BROWSER_DIST = 'dist/browser';
const SERVER_DIST = 'dist/server';
function addDependenciesAndScripts(options) {
    return (host) => {
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/common',
            version: '^6.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/core',
            version: '^6.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: 'reflect-metadata',
            version: '^0.1.13'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nestjs/platform-express',
            version: '^6.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nguniversal/express-engine',
            version: '^8.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Default,
            name: '@nguniversal/module-map-ngfactory-loader',
            version: '^8.0.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'ts-loader',
            version: '^5.2.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'wait-on',
            version: '^3.2.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'webpack-cli',
            version: '^3.1.0'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'rimraf',
            version: '^2.6.3'
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'nodemon',
            version: '^1.18.11'
        });
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        pkg.scripts['serve'] = 'node serve-script';
        pkg.scripts['compile:server'] =
            'webpack --config webpack.server.config.js --progress --colors';
        pkg.scripts['serve:ssr'] = `node dist/server`;
        pkg.scripts['build:ssr'] =
            'npm run build:client-and-server-bundles && npm run compile:server';
        pkg.scripts['build:client-and-server-bundles'] = `ng build --prod && ng run ${options.clientProject}:server:production`;
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        return host;
    };
}
function getClientProject(host, options) {
    const workspace = config_1.getWorkspace(host);
    const clientName = options.clientProject.trim();
    const clientProject = workspace.projects[clientName];
    if (!clientProject) {
        throw new schematics_1.SchematicsException(`Client app ${options.clientProject} not found.`);
    }
    return clientProject;
}
function default_1(options) {
    return (host, context) => {
        const clientProject = getClientProject(host, options);
        if (clientProject.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`Universal requires a project type of "application".`);
        }
        if (!options.skipInstall) {
            context.addTask(new tasks_1.NodePackageInstallTask());
        }
        const rootSource = schematics_1.apply(schematics_1.url('./files/root'), [
            schematics_1.template(Object.assign({}, core_1.strings, options, { stripTsExtension: (s) => s.replace(/\.ts$/, ''), getBrowserDistDirectory: () => BROWSER_DIST, getServerDistDirectory: () => SERVER_DIST, getClientProjectName: () => options.clientProject }))
        ]);
        return schematics_1.chain([
            schematics_1.externalSchematic('@schematics/angular', 'universal', options),
            rules_1.updateConfigFile(options),
            schematics_1.mergeWith(rootSource),
            addDependenciesAndScripts(options),
            rules_1.addModuleMapLoader(options),
            rules_1.addExports(options)
        ]);
    };
}
exports.default = default_1;
